version: v2beta1
name: backstage

# `vars` specifies variables which may be used as ${VAR_NAME} in devspace.yaml
vars:
  IMAGE: ghcr.io/devxp-tech/backstage

pipelines:
  # Override the default pipeline for 'devspace dev'
  dev:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      create_deployments --all     # 2. Deploy Helm charts and manifests specfied as "deployments"
      start_dev --all              # 3. Start dev mode "app" (see "dev" section

# This is a list of `images` that DevSpace can build for this project
# We recommend to skip image building during development (devspace dev) as much as possible
images:
  app:
    image: ${IMAGE}
    dockerfile: ./Dockerfile
    build:
      disabled: true
#     createPullSecret: true

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  app:
    helm:
      chart:
        name: devxp-dev
        version: 0.0.3
        repo: https://devxp-tech.github.io/helm-charts
      values:
        name: backstage
        serviceAccount:
          name: backstage
        service:
          port: 3000
        container:
          port: 7007
        envs:
          - name: POSTGRES_HOST
            value: db-postgresql
          - name: POSTGRES_PORT
            value: 5432
          - name: POSTGRES_USER
            value: ${POSTGRES_USER}
          - name: POSTGRES_PASSWORD
            value: ${POSTGRES_PASSWORD}
          - name: POSTGRES_DATABASE
            value: backstage
          - name: PGDATABASE
            value: backstage
          - name: ARGOCD_AUTH_TOKEN
            value: ${ARGOCD_AUTH_TOKEN}
          - name: AUTH_GITHUB_CLIENT_ID
            value: ${AUTH_GITHUB_CLIENT_ID}
          - name: AUTH_GITHUB_CLIENT_SECRET
            value: ${AUTH_GITHUB_CLIENT_SECRET}
          - name: ENV
            value: development
          - name: GITHUB_ACCESS_TOKEN
            value: ${GITHUB_ACCESS_TOKEN}
          - name: GIT_DISCOVERY_ACROSS_FILESYSTEM
            value: 1
          - name: GRAFANA_TOKEN
            value: ${GRAFANA_TOKEN}
          - name: GITHUB_TOKEN
            value: ${GITHUB_TOKEN}
          - name: K8S_TOKEN
            value: ${K8S_TOKEN}
          - name: K8S_URL
            value: ${K8S_URL}
          - name: SONARQUBE_TOKEN
            value: ${SONARQUBE_TOKEN}
          - name: TECHDOCS_BUCKET
            value: ${TECHDOCS_BUCKET}
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "200m"
            memory: "512Mi"
  db:
    helm:
      chart:
        name: postgresql
        version: 12.2.1
        repo: https://charts.bitnami.com/bitnami
      values:
        global:
          postgresql:
            auth:
              username: ${POSTGRES_USER}
              password: ${POSTGRES_PASSWORD}
              postgresPassword: ${POSTGRES_PASSWORD}
              database: "backstage"
        auth:
          username: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
          postgresPassword: ${POSTGRES_PASSWORD}
          database: "backstage"

# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  app:
    # Search for the container that runs this image
    imageSelector: ${IMAGE}
    # Replace the container image with this dev-optimized image (allows to skip image building during development)
    devImage: ghcr.io/loft-sh/devspace-containers/javascript:18-alpine
    logs: {}
    # command: ["node", "packages/backend", "--config", "app-config.yaml"]
    workingDir: /app
    # Sync files between the local filesystem and the development container
    sync:
      - path: ./app:/app
        excludePaths:
          - .git/
        uploadExcludePaths:
          - Dockerfile
          - target/
          - .git/
        uploadExcludeFile: .dockerignore
        # onUpload:
        #   restartContainer: true
    terminal:
      command: ./devspace_start.sh
    # Forward the following ports to be able access your application via localhost
    ports:
      - port: 23450:2345
      # - port: 3000:3000
      - port: 7007:7007
    # Open the following URLs once they return an HTTP status code other than 502 or 503
    open:
      - url: http://backstage.local:7007
      - url: http://localhost:8090

# Use the `commands` section to define repeatable dev workflows for this project
commands:
  migrate-db:
    command: |-
      echo 'This is a cross-platform, shared command that can be used to codify any kind of dev task.'
      echo 'Anyone using this project can invoke it via "devspace run migrate-db"'
  test:
    command: |-
      go test -v ./...

# Define dependencies to other projects with a devspace.yaml
# dependencies:
#   homepage:
#     git: https://github.com/devxp-tech/homepage
#     branch: main
#     pipeline: dev

## Teste
